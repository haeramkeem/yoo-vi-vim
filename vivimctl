#!/bin/bash
# vim: set ft=sh:

set -e
VERSION="v0.1.0"

#
# error
#
function error_unknown_command() {
    local command="$1"
    local subcommand="$2"
    echo "error: Unknown subcommand or option \"$subcommand\" for \"$command\"" 1>&2
}

#
# zshrc
#
function zshrc() {
    local zshrc_src="./zshrc/.zshrc"
    local zshrc_dst="$HOME/.zshrc"

    case "$1" in
        help | --help | -H)
            zshrc_help
            ;;
        diff)
            zshrc_diff $zshrc_src $zshrc_dst
            ;;
        import)
            zshrc_import $zshrc_src $zshrc_dst
            ;;
        export)
            zshrc_export $zshrc_src $zshrc_dst
            ;;
        *)
            error_unknown_command "vivimctl zshrc" "$1"
            exit 1
            ;;
    esac
}

function zshrc_help() {
cat << EOF | column -t -s '|'
SUBCOMMAND|DESCRIPTION
diff|Compare .zshrc file for current git repository and home directory.
export|Export .zshrc file from current git repository to home directory.
import|Import .zshrc file from home directory to current git repository.
EOF
}

function zshrc_diff() {
    local zshrc_src="$1"
    local zshrc_dst="$2"

    colordiff "$zshrc_dst" "$zshrc_src" \
        && echo "zshrc synced with '$HOME/.zshrc'"
}

function zshrc_import() {
    local zshrc_src="$1"
    local zshrc_dst="$2"

    mv "$zshrc_src" "$zshrc_src.bak"
    cp -v "$zshrc_dst" "$zshrc_src"
}

function zshrc_export() {
    local zshrc_src="$1"
    local zshrc_dst="$2"

    mv "$zshrc_dst" "$zshrc_dst.bak"
    cp -v "$zshrc_src" "$zshrc_dst"
}

#
# main
#
function main() {
    case "$1" in
        zshrc)
            zshrc $2
            ;;
        help | --help | -H)
            main_help
            ;;
        version | --version | -V)
            main_version
            ;;
        *)
            error_unknown_command "vivimctl" "$1"
            exit 1
            ;;
    esac
}

function main_help() {
cat << EOF | column -t -s '|'
SUBCOMMAND|DESCRIPTION
zshrc|Manage zsh configuration file (zshrc)
EOF
}

function main_version() {
cat << EOF
VIVIMCTL version $VERSION

GIT STATUS:
$(git remote -v)
EOF
}

main $@
